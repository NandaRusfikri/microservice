// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: proto/order/order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceOrderHandlerRPCClient is the client API for ServiceOrderHandlerRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceOrderHandlerRPCClient interface {
	//    rpc ListProductRPC(google.protobuf.Empty) returns (ResponseEntityOrderList);
	CreateOrderRPC(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*ModelProtoOrder, error)
}

type serviceOrderHandlerRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceOrderHandlerRPCClient(cc grpc.ClientConnInterface) ServiceOrderHandlerRPCClient {
	return &serviceOrderHandlerRPCClient{cc}
}

func (c *serviceOrderHandlerRPCClient) CreateOrderRPC(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*ModelProtoOrder, error) {
	out := new(ModelProtoOrder)
	err := c.cc.Invoke(ctx, "/models.ServiceOrderHandlerRPC/CreateOrderRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceOrderHandlerRPCServer is the server API for ServiceOrderHandlerRPC service.
// All implementations must embed UnimplementedServiceOrderHandlerRPCServer
// for forward compatibility
type ServiceOrderHandlerRPCServer interface {
	//    rpc ListProductRPC(google.protobuf.Empty) returns (ResponseEntityOrderList);
	CreateOrderRPC(context.Context, *CreateOrderRequest) (*ModelProtoOrder, error)
	mustEmbedUnimplementedServiceOrderHandlerRPCServer()
}

// UnimplementedServiceOrderHandlerRPCServer must be embedded to have forward compatible implementations.
type UnimplementedServiceOrderHandlerRPCServer struct {
}

func (UnimplementedServiceOrderHandlerRPCServer) CreateOrderRPC(context.Context, *CreateOrderRequest) (*ModelProtoOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderRPC not implemented")
}
func (UnimplementedServiceOrderHandlerRPCServer) mustEmbedUnimplementedServiceOrderHandlerRPCServer() {
}

// UnsafeServiceOrderHandlerRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceOrderHandlerRPCServer will
// result in compilation errors.
type UnsafeServiceOrderHandlerRPCServer interface {
	mustEmbedUnimplementedServiceOrderHandlerRPCServer()
}

func RegisterServiceOrderHandlerRPCServer(s grpc.ServiceRegistrar, srv ServiceOrderHandlerRPCServer) {
	s.RegisterService(&ServiceOrderHandlerRPC_ServiceDesc, srv)
}

func _ServiceOrderHandlerRPC_CreateOrderRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceOrderHandlerRPCServer).CreateOrderRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.ServiceOrderHandlerRPC/CreateOrderRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceOrderHandlerRPCServer).CreateOrderRPC(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceOrderHandlerRPC_ServiceDesc is the grpc.ServiceDesc for ServiceOrderHandlerRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceOrderHandlerRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "models.ServiceOrderHandlerRPC",
	HandlerType: (*ServiceOrderHandlerRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrderRPC",
			Handler:    _ServiceOrderHandlerRPC_CreateOrderRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/order/order.proto",
}
