// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/order/order.proto

package order

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ServiceOrderHandlerRPC service

func NewServiceOrderHandlerRPCEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ServiceOrderHandlerRPC service

type ServiceOrderHandlerRPCService interface {
	// rpc ListProductRPC(google.protobuf.Empty) returns (ResponseEntityOrderList);
	CreateOrderRPC(ctx context.Context, in *CreateOrderRequest, opts ...client.CallOption) (*ModelProtoOrder, error)
}

type serviceOrderHandlerRPCService struct {
	c    client.Client
	name string
}

func NewServiceOrderHandlerRPCService(name string, c client.Client) ServiceOrderHandlerRPCService {
	return &serviceOrderHandlerRPCService{
		c:    c,
		name: name,
	}
}

func (c *serviceOrderHandlerRPCService) CreateOrderRPC(ctx context.Context, in *CreateOrderRequest, opts ...client.CallOption) (*ModelProtoOrder, error) {
	req := c.c.NewRequest(c.name, "ServiceOrderHandlerRPC.CreateOrderRPC", in)
	out := new(ModelProtoOrder)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServiceOrderHandlerRPC service

type ServiceOrderHandlerRPCHandler interface {
	// rpc ListProductRPC(google.protobuf.Empty) returns (ResponseEntityOrderList);
	CreateOrderRPC(context.Context, *CreateOrderRequest, *ModelProtoOrder) error
}

func RegisterServiceOrderHandlerRPCHandler(s server.Server, hdlr ServiceOrderHandlerRPCHandler, opts ...server.HandlerOption) error {
	type serviceOrderHandlerRPC interface {
		CreateOrderRPC(ctx context.Context, in *CreateOrderRequest, out *ModelProtoOrder) error
	}
	type ServiceOrderHandlerRPC struct {
		serviceOrderHandlerRPC
	}
	h := &serviceOrderHandlerRPCHandler{hdlr}
	return s.Handle(s.NewHandler(&ServiceOrderHandlerRPC{h}, opts...))
}

type serviceOrderHandlerRPCHandler struct {
	ServiceOrderHandlerRPCHandler
}

func (h *serviceOrderHandlerRPCHandler) CreateOrderRPC(ctx context.Context, in *CreateOrderRequest, out *ModelProtoOrder) error {
	return h.ServiceOrderHandlerRPCHandler.CreateOrderRPC(ctx, in, out)
}
