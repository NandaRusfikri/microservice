// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/product/product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceProductRPC_GetById_FullMethodName = "/product.ServiceProductRPC/GetById"
	ServiceProductRPC_GetList_FullMethodName = "/product.ServiceProductRPC/GetList"
	ServiceProductRPC_Create_FullMethodName  = "/product.ServiceProductRPC/Create"
	ServiceProductRPC_Update_FullMethodName  = "/product.ServiceProductRPC/UpdateStock"
)

// ServiceProductRPCClient is the client API for ServiceProductRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceProductRPCClient interface {
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*Product, error)
	GetList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetListResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Product, error)
	Update(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error)
}

type serviceProductRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceProductRPCClient(cc grpc.ClientConnInterface) ServiceProductRPCClient {
	return &serviceProductRPCClient{cc}
}

func (c *serviceProductRPCClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, ServiceProductRPC_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProductRPCClient) GetList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, ServiceProductRPC_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProductRPCClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, ServiceProductRPC_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProductRPCClient) Update(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, ServiceProductRPC_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceProductRPCServer is the server API for ServiceProductRPC service.
// All implementations must embed UnimplementedServiceProductRPCServer
// for forward compatibility
type ServiceProductRPCServer interface {
	GetById(context.Context, *GetByIdRequest) (*Product, error)
	GetList(context.Context, *emptypb.Empty) (*GetListResponse, error)
	Create(context.Context, *CreateRequest) (*Product, error)
	Update(context.Context, *Product) (*Product, error)
	mustEmbedUnimplementedServiceProductRPCServer()
}

// UnimplementedServiceProductRPCServer must be embedded to have forward compatible implementations.
type UnimplementedServiceProductRPCServer struct {
}

func (UnimplementedServiceProductRPCServer) GetById(context.Context, *GetByIdRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedServiceProductRPCServer) GetList(context.Context, *emptypb.Empty) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedServiceProductRPCServer) Create(context.Context, *CreateRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedServiceProductRPCServer) Update(context.Context, *Product) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStock not implemented")
}
func (UnimplementedServiceProductRPCServer) mustEmbedUnimplementedServiceProductRPCServer() {}

// UnsafeServiceProductRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceProductRPCServer will
// result in compilation errors.
type UnsafeServiceProductRPCServer interface {
	mustEmbedUnimplementedServiceProductRPCServer()
}

func RegisterServiceProductRPCServer(s grpc.ServiceRegistrar, srv ServiceProductRPCServer) {
	s.RegisterService(&ServiceProductRPC_ServiceDesc, srv)
}

func _ServiceProductRPC_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProductRPCServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProductRPC_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProductRPCServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProductRPC_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProductRPCServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProductRPC_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProductRPCServer).GetList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProductRPC_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProductRPCServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProductRPC_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProductRPCServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProductRPC_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProductRPCServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProductRPC_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProductRPCServer).Update(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceProductRPC_ServiceDesc is the grpc.ServiceDesc for ServiceProductRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceProductRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.ServiceProductRPC",
	HandlerType: (*ServiceProductRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _ServiceProductRPC_GetById_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _ServiceProductRPC_GetList_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ServiceProductRPC_Create_Handler,
		},
		{
			MethodName: "UpdateStock",
			Handler:    _ServiceProductRPC_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/product/product.proto",
}
