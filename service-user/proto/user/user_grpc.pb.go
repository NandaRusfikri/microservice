// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: proto/user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceUserRPC_GetById_FullMethodName    = "/service_user.ServiceUserRPC/GetById"
	ServiceUserRPC_CutBalance_FullMethodName = "/service_user.ServiceUserRPC/CutBalance"
)

// ServiceUserRPCClient is the client API for ServiceUserRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceUserRPCClient interface {
	GetById(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*User, error)
	CutBalance(ctx context.Context, in *CutBalanceRequest, opts ...grpc.CallOption) (*CutBalanceResponse, error)
}

type serviceUserRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceUserRPCClient(cc grpc.ClientConnInterface) ServiceUserRPCClient {
	return &serviceUserRPCClient{cc}
}

func (c *serviceUserRPCClient) GetById(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, ServiceUserRPC_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceUserRPCClient) CutBalance(ctx context.Context, in *CutBalanceRequest, opts ...grpc.CallOption) (*CutBalanceResponse, error) {
	out := new(CutBalanceResponse)
	err := c.cc.Invoke(ctx, ServiceUserRPC_CutBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceUserRPCServer is the server API for ServiceUserRPC service.
// All implementations must embed UnimplementedServiceUserRPCServer
// for forward compatibility
type ServiceUserRPCServer interface {
	GetById(context.Context, *GetByIDRequest) (*User, error)
	CutBalance(context.Context, *CutBalanceRequest) (*CutBalanceResponse, error)
	mustEmbedUnimplementedServiceUserRPCServer()
}

// UnimplementedServiceUserRPCServer must be embedded to have forward compatible implementations.
type UnimplementedServiceUserRPCServer struct {
}

func (UnimplementedServiceUserRPCServer) GetById(context.Context, *GetByIDRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedServiceUserRPCServer) CutBalance(context.Context, *CutBalanceRequest) (*CutBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CutBalance not implemented")
}
func (UnimplementedServiceUserRPCServer) mustEmbedUnimplementedServiceUserRPCServer() {}

// UnsafeServiceUserRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceUserRPCServer will
// result in compilation errors.
type UnsafeServiceUserRPCServer interface {
	mustEmbedUnimplementedServiceUserRPCServer()
}

func RegisterServiceUserRPCServer(s grpc.ServiceRegistrar, srv ServiceUserRPCServer) {
	s.RegisterService(&ServiceUserRPC_ServiceDesc, srv)
}

func _ServiceUserRPC_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUserRPCServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceUserRPC_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUserRPCServer).GetById(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUserRPC_CutBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CutBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUserRPCServer).CutBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceUserRPC_CutBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUserRPCServer).CutBalance(ctx, req.(*CutBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceUserRPC_ServiceDesc is the grpc.ServiceDesc for ServiceUserRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceUserRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_user.ServiceUserRPC",
	HandlerType: (*ServiceUserRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _ServiceUserRPC_GetById_Handler,
		},
		{
			MethodName: "CutBalance",
			Handler:    _ServiceUserRPC_CutBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user/user.proto",
}
